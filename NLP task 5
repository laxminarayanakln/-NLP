import string
import random
import nltk
from nltk.corpus import stopwords, reuters
from collections import Counter, defaultdict
from nltk import FreqDist, ngrams

nltk.download('punkt_tab') # Download punkt_tab before accessing reuters.sents()
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('reuters')


sents = reuters.sents()
stop_word = set(stopwords.words('english'))

# Add extra punctuation to removal list
extra_punct = ' " - _'
string.punctuation += extra_punct
removal_list = set(stop_word).union(set(string.punctuation)).union({'\t', 'rt'})

unigram = []
bigram = []
trigram = []

for sentence in sents:
    # lowercase words
    sentence = [w.lower() for w in sentence if w != '.']  # remove '.' during list comp

    unigram.extend(sentence)
    bigram.extend(list(ngrams(sentence, 2, pad_left=True, pad_right=True)))
    trigram.extend(list(ngrams(sentence, 3, pad_left=True, pad_right=True)))

# Remove stopwords and punctuation
def remove_stopwords_ngrams(ngrams_list):
    cleaned = []
    for tup in ngrams_list:
        # tup can be a string or a tuple
        # If it's a string (unigram), make it tuple for consistency
        if isinstance(tup, str):
            words = [tup]
        else:
            words = [w for w in tup if w is not None]  # filter None padding

        # Keep ngram if at least one word is NOT in removal_list
        if any(w not in removal_list for w in words):
            cleaned.append(tup)
    return cleaned

unigram = remove_stopwords_ngrams(unigram)
bigram = remove_stopwords_ngrams(bigram)
trigram = remove_stopwords_ngrams(trigram)

freq_uni = FreqDist(unigram)
freq_bi = FreqDist(bigram)
freq_tri = FreqDist(trigram)

# Build trigram model dictionary: (a,b) -> Counter of c's
d = defaultdict(Counter)
for (a, b, c), freq in freq_tri.items():
    if (a is not None) and (b is not None) and (c is not None):
        d[(a, b)][c] += freq

def pick_word(counter):
    "choose a random element from the counter elements"
    return random.choice(list(counter.elements()))

prefix = ("he", "is")
print(" ".join(prefix))
s = " ".join(prefix)

for i in range(19):
    if prefix in d and d[prefix]: # Check if prefix exists and the counter is not empty
        suffix = pick_word(d[prefix])
        s = s + ' ' + suffix
        print(s)
        prefix = (prefix[1], suffix)
    else:
        print(f"Prefix {prefix} not found in the trigram model or has no valid continuations.")
        break
